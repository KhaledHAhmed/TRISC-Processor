// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
// Created on Thu Nov 04 15:51:30 2021

Accumulater Accumulater_inst
(
	.Load(Load_sig) ,	// input  Load_sig
	.Increment(Increment_sig) ,	// input  Increment_sig
	.Clear(Clear_sig) ,	// input  Clear_sig
	.ALU/MDR(ALU/MDR_sig) ,	// input  ALU/MDR_sig
	.ALU0(ALU0_sig) ,	// input  ALU0_sig
	.ALU1(ALU1_sig) ,	// input  ALU1_sig
	.ALU2(ALU2_sig) ,	// input  ALU2_sig
	.ALU3(ALU3_sig) ,	// input  ALU3_sig
	.MDR0(MDR0_sig) ,	// input  MDR0_sig
	.MDR1(MDR1_sig) ,	// input  MDR1_sig
	.MDR2(MDR2_sig) ,	// input  MDR2_sig
	.MDR3(MDR3_sig) ,	// input  MDR3_sig
	.AC3out(AC3out_sig) ,	// output  AC3out_sig
	.AC2out(AC2out_sig) ,	// output  AC2out_sig
	.AC0out(AC0out_sig) ,	// output  AC0out_sig
	.AC1out(AC1out_sig) 	// output  AC1out_sig
);

