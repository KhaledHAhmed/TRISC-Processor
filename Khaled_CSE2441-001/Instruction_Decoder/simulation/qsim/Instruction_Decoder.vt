// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/17/2020 13:47:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Instruction_Decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Instruction_Decoder_vlg_sample_tst(
	w,
	x,
	y,
	z,
	sampler_tx
);
input  w;
input  x;
input  y;
input  z;
output sampler_tx;

reg sample;
time current_time;
always @(w or x or y or z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Instruction_Decoder_vlg_check_tst (
	ADD,
	CLR,
	HLT,
	INC,
	JMP,
	JPN,
	JPZ,
	LDA,
	SAT,
	SUB,
	XOR,
	sampler_rx
);
input  ADD;
input  CLR;
input  HLT;
input  INC;
input  JMP;
input  JPN;
input  JPZ;
input  LDA;
input  SAT;
input  SUB;
input  XOR;
input sampler_rx;

reg  ADD_expected;
reg  CLR_expected;
reg  HLT_expected;
reg  INC_expected;
reg  JMP_expected;
reg  JPN_expected;
reg  JPZ_expected;
reg  LDA_expected;
reg  SAT_expected;
reg  SUB_expected;
reg  XOR_expected;

reg  ADD_prev;
reg  CLR_prev;
reg  HLT_prev;
reg  INC_prev;
reg  JMP_prev;
reg  JPN_prev;
reg  JPZ_prev;
reg  LDA_prev;
reg  SAT_prev;
reg  SUB_prev;
reg  XOR_prev;

reg  ADD_expected_prev;
reg  CLR_expected_prev;
reg  HLT_expected_prev;
reg  INC_expected_prev;
reg  JMP_expected_prev;
reg  JPN_expected_prev;
reg  JPZ_expected_prev;
reg  LDA_expected_prev;
reg  SAT_expected_prev;
reg  SUB_expected_prev;
reg  XOR_expected_prev;

reg  last_ADD_exp;
reg  last_CLR_exp;
reg  last_HLT_exp;
reg  last_INC_exp;
reg  last_JMP_exp;
reg  last_JPN_exp;
reg  last_JPZ_exp;
reg  last_LDA_exp;
reg  last_SAT_exp;
reg  last_SUB_exp;
reg  last_XOR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADD_prev = ADD;
	CLR_prev = CLR;
	HLT_prev = HLT;
	INC_prev = INC;
	JMP_prev = JMP;
	JPN_prev = JPN;
	JPZ_prev = JPZ;
	LDA_prev = LDA;
	SAT_prev = SAT;
	SUB_prev = SUB;
	XOR_prev = XOR;
end

// update expected /o prevs

always @(trigger)
begin
	ADD_expected_prev = ADD_expected;
	CLR_expected_prev = CLR_expected;
	HLT_expected_prev = HLT_expected;
	INC_expected_prev = INC_expected;
	JMP_expected_prev = JMP_expected;
	JPN_expected_prev = JPN_expected;
	JPZ_expected_prev = JPZ_expected;
	LDA_expected_prev = LDA_expected;
	SAT_expected_prev = SAT_expected;
	SUB_expected_prev = SUB_expected;
	XOR_expected_prev = XOR_expected;
end



// expected ADD
initial
begin
	ADD_expected = 1'bX;
end 

// expected CLR
initial
begin
	CLR_expected = 1'bX;
end 

// expected HLT
initial
begin
	HLT_expected = 1'bX;
end 

// expected INC
initial
begin
	INC_expected = 1'bX;
end 

// expected JMP
initial
begin
	JMP_expected = 1'bX;
end 

// expected JPN
initial
begin
	JPN_expected = 1'bX;
end 

// expected JPZ
initial
begin
	JPZ_expected = 1'bX;
end 

// expected LDA
initial
begin
	LDA_expected = 1'bX;
end 

// expected SAT
initial
begin
	SAT_expected = 1'bX;
end 

// expected SUB
initial
begin
	SUB_expected = 1'bX;
end 

// expected XOR
initial
begin
	XOR_expected = 1'bX;
end 
// generate trigger
always @(ADD_expected or ADD or CLR_expected or CLR or HLT_expected or HLT or INC_expected or INC or JMP_expected or JMP or JPN_expected or JPN or JPZ_expected or JPZ or LDA_expected or LDA or SAT_expected or SAT or SUB_expected or SUB or XOR_expected or XOR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADD = %b | expected CLR = %b | expected HLT = %b | expected INC = %b | expected JMP = %b | expected JPN = %b | expected JPZ = %b | expected LDA = %b | expected SAT = %b | expected SUB = %b | expected XOR = %b | ",ADD_expected_prev,CLR_expected_prev,HLT_expected_prev,INC_expected_prev,JMP_expected_prev,JPN_expected_prev,JPZ_expected_prev,LDA_expected_prev,SAT_expected_prev,SUB_expected_prev,XOR_expected_prev);
	$display("| real ADD = %b | real CLR = %b | real HLT = %b | real INC = %b | real JMP = %b | real JPN = %b | real JPZ = %b | real LDA = %b | real SAT = %b | real SUB = %b | real XOR = %b | ",ADD_prev,CLR_prev,HLT_prev,INC_prev,JMP_prev,JPN_prev,JPZ_prev,LDA_prev,SAT_prev,SUB_prev,XOR_prev);
`endif
	if (
		( ADD_expected_prev !== 1'bx ) && ( ADD_prev !== ADD_expected_prev )
		&& ((ADD_expected_prev !== last_ADD_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_expected_prev);
		$display ("     Real value = %b", ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADD_exp = ADD_expected_prev;
	end
	if (
		( CLR_expected_prev !== 1'bx ) && ( CLR_prev !== CLR_expected_prev )
		&& ((CLR_expected_prev !== last_CLR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLR_expected_prev);
		$display ("     Real value = %b", CLR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CLR_exp = CLR_expected_prev;
	end
	if (
		( HLT_expected_prev !== 1'bx ) && ( HLT_prev !== HLT_expected_prev )
		&& ((HLT_expected_prev !== last_HLT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HLT_expected_prev);
		$display ("     Real value = %b", HLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HLT_exp = HLT_expected_prev;
	end
	if (
		( INC_expected_prev !== 1'bx ) && ( INC_prev !== INC_expected_prev )
		&& ((INC_expected_prev !== last_INC_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INC_exp = INC_expected_prev;
	end
	if (
		( JMP_expected_prev !== 1'bx ) && ( JMP_prev !== JMP_expected_prev )
		&& ((JMP_expected_prev !== last_JMP_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JMP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JMP_expected_prev);
		$display ("     Real value = %b", JMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_JMP_exp = JMP_expected_prev;
	end
	if (
		( JPN_expected_prev !== 1'bx ) && ( JPN_prev !== JPN_expected_prev )
		&& ((JPN_expected_prev !== last_JPN_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JPN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JPN_expected_prev);
		$display ("     Real value = %b", JPN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JPN_exp = JPN_expected_prev;
	end
	if (
		( JPZ_expected_prev !== 1'bx ) && ( JPZ_prev !== JPZ_expected_prev )
		&& ((JPZ_expected_prev !== last_JPZ_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JPZ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JPZ_expected_prev);
		$display ("     Real value = %b", JPZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_JPZ_exp = JPZ_expected_prev;
	end
	if (
		( LDA_expected_prev !== 1'bx ) && ( LDA_prev !== LDA_expected_prev )
		&& ((LDA_expected_prev !== last_LDA_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LDA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LDA_expected_prev);
		$display ("     Real value = %b", LDA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LDA_exp = LDA_expected_prev;
	end
	if (
		( SAT_expected_prev !== 1'bx ) && ( SAT_prev !== SAT_expected_prev )
		&& ((SAT_expected_prev !== last_SAT_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SAT_expected_prev);
		$display ("     Real value = %b", SAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SAT_exp = SAT_expected_prev;
	end
	if (
		( SUB_expected_prev !== 1'bx ) && ( SUB_prev !== SUB_expected_prev )
		&& ((SUB_expected_prev !== last_SUB_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SUB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SUB_expected_prev);
		$display ("     Real value = %b", SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SUB_exp = SUB_expected_prev;
	end
	if (
		( XOR_expected_prev !== 1'bx ) && ( XOR_prev !== XOR_expected_prev )
		&& ((XOR_expected_prev !== last_XOR_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XOR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XOR_expected_prev);
		$display ("     Real value = %b", XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_XOR_exp = XOR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Instruction_Decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg w;
reg x;
reg y;
reg z;
// wires                                               
wire ADD;
wire CLR;
wire HLT;
wire INC;
wire JMP;
wire JPN;
wire JPZ;
wire LDA;
wire SAT;
wire SUB;
wire XOR;

wire sampler;                             

// assign statements (if any)                          
Instruction_Decoder i1 (
// port map - connection between master ports and signals/registers   
	.ADD(ADD),
	.CLR(CLR),
	.HLT(HLT),
	.INC(INC),
	.JMP(JMP),
	.JPN(JPN),
	.JPZ(JPZ),
	.LDA(LDA),
	.SAT(SAT),
	.SUB(SUB),
	.\XOR (XOR),
	.w(w),
	.x(x),
	.y(y),
	.z(z)
);

// w
initial
begin
	w = 1'b0;
	w = #400000 1'b1;
	w = #400000 1'b0;
end 

// x
initial
begin
	repeat(2)
	begin
		x = 1'b0;
		x = #200000 1'b1;
		# 200000;
	end
	x = 1'b0;
end 

// y
always
begin
	y = 1'b0;
	y = #100000 1'b1;
	#100000;
end 

// z
always
begin
	z = 1'b0;
	z = #50000 1'b1;
	#50000;
end 

Instruction_Decoder_vlg_sample_tst tb_sample (
	.w(w),
	.x(x),
	.y(y),
	.z(z),
	.sampler_tx(sampler)
);

Instruction_Decoder_vlg_check_tst tb_out(
	.ADD(ADD),
	.CLR(CLR),
	.HLT(HLT),
	.INC(INC),
	.JMP(JMP),
	.JPN(JPN),
	.JPZ(JPZ),
	.LDA(LDA),
	.SAT(SAT),
	.SUB(SUB),
	.XOR(XOR),
	.sampler_rx(sampler)
);
endmodule

